plugins {
    id 'java'
    id "io.qameta.allure" version "2.12.0"
}

repositories {
    mavenCentral()
}
def
    junitVersion = '5.12.0',
    webDriverManagerVersion = '5.9.3',
    selenideVersion = '7.7.3',
    allureVersion = '2.27.0',
    assertjVersion = '3.27.3',
    fakerVersion = "1.0.2",
    commonsIOVersion = '2.18.0',
    pdfVersion = "1.9.2",
    xlsVersion = '1.7.2',
    csvVersion = '5.10',
    slf4jVersion = '2.0.17'

allure {
    report {
        version.set("$allureVersion")
    }
    adapter { // отвечает за появление папочки build/allure-results
        aspectjWeaver.set(true) //обработка аннотации @Step
        frameworks {
            junit5 { //название фреймворка
                adapterVersion.set("$allureVersion") //версия интеграции фреймворка и Allure
            }
        }
    }
}
// версия Selenide специально не 6, т.к. параллельный запуск лучше работает на версии 5.24.0


dependencies {
    testImplementation(
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "io.github.bonigarcia:webdrivermanager:$webDriverManagerVersion",
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.assertj:assertj-core:$assertjVersion",
            "com.github.javafaker:javafaker:$fakerVersion",
            "commons-io:commons-io:$commonsIOVersion",
            "com.codeborne:pdf-test:$pdfVersion",
            "com.codeborne:xls-test:$xlsVersion",
            "com.opencsv:opencsv:$csvVersion"
    )
    testRuntimeOnly(
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion"
    )
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}


tasks.withType(Test).configureEach {

    def environment = project.findProperty('env') ?: 'dev'
    def remoteUrl   = project.findProperty('remoteUrl') ?: "http://localhost:4444/wd/hub"
    def threads     = project.findProperty("threads") ?: null

    // Установка системных свойств для использования во время выполнения тестов
    System.setProperty('BASE_URL',              getProperty(environment as String, 'BASE_URL'));

    System.setProperty('ADMIN_USERNAME',        getProperty(environment as String, 'ADMIN_USERNAME'));
    System.setProperty('ADMIN_PASSWORD',        getProperty(environment as String, 'ADMIN_PASSWORD'));

    if (remoteUrl != null){
        System.setProperty('REMOTE_URL',            remoteUrl as String)
    }

    if (threads != null){
        System.setProperty('threads',               threads as String);
    }

    // Отладочное сообщение для проверки значения системного свойства
    println "System property 'BASE_URL':            ${System.getProperty('BASE_URL')}"
    println "System property 'ADMIN_USERNAME':      ${System.getProperty('ADMIN_USERNAME')}"
    println "System property 'ADMIN_PASSWORD':      ${System.getProperty('ADMIN_PASSWORD')}"

    println "System property 'REMOTE_URL':          ${System.getProperty('REMOTE_URL')}"

    println "System property 'threads':             ${System.getProperty('threads')}"

    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }

}

def getProperty(String environment, String propertyName) {
    def configFile = file("src/test/resources/config/${environment}.properties")
    def config = new Properties()
    config.load(new FileInputStream(configFile))
    println "Loaded properties from ${configFile}: ${config}"
    def propertyValue = config.getProperty(propertyName)
    println "Retrieved property ${propertyName}: ${propertyValue}"
    return propertyValue
}
